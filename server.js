import express from 'express';
import nodemailer from 'nodemailer';
import cors from 'cors';
import { readFileSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ mail.env
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

try {
  const envContent = readFileSync(join(__dirname, 'mail.env'), 'utf8');
  const envVars = {};
  
  envContent.split('\n').forEach(line => {
    const trimmed = line.trim();
    if (trimmed && !trimmed.startsWith('#')) {
      const [key, value] = trimmed.split('=');
      if (key && value) {
        envVars[key.trim()] = value.trim();
      }
    }
  });
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  Object.assign(process.env, envVars);
  console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ mail.env');
} catch (error) {
  console.log('‚ö†Ô∏è –§–∞–π–ª mail.env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
}

const app = express();

// CORS configuration
app.use(cors({
  origin: ['http://localhost:5173', 'http://localhost:5174', 'https://—Ç–µ—Ö–º–µ—Ç–ø—Ä–æ–º.—Ä—Ñ'],
  credentials: true
}));

app.use(express.json());

// Serve static files from the root directory
// Static with caching for assets
app.use(express.static('.', {
  setHeaders: (res, path) => {
    // Cache immutable assets for 30 days
    if (/(?:\.(?:js|css|png|jpg|jpeg|webp|svg|gif|ico|mp4|webm|ogg|mp3|woff2?))$/i.test(path)) {
      res.setHeader('Cache-Control', 'public, max-age=2592000, immutable');
    } else {
      // HTML and others: short cache
      res.setHeader('Cache-Control', 'no-cache');
    }
  }
}));

// Configure transporter using Timeweb SMTP server
const smtpPort = Number(process.env.SMTP_PORT || 465);
const isSecurePort = smtpPort === 465 || smtpPort === 995 || smtpPort === 993;

const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST || 'smtp.timeweb.ru',
  port: smtpPort,
  secure: isSecurePort, // true –¥–ª—è –ø–æ—Ä—Ç–æ–≤ 465, 995, 993; false –¥–ª—è 25, 2525, 110, 143
  auth: {
    user: process.env.SMTP_USER || 'EKB@—Ç–µ—Ö–º–µ–ø—Ä–æ–º.—Ä—Ñ',
    pass: process.env.SMTP_PASS || 'j1chs2aEA',
  },
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Timeweb SMTP
  tls: {
    rejectUnauthorized: false,
    ciphers: 'SSLv3'
  },
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  requireTLS: !isSecurePort, // true –¥–ª—è STARTTLS –ø–æ—Ä—Ç–æ–≤
  secureConnection: isSecurePort
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SMTP
transporter.verify(function(error, success) {
  if (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP:', error.message);
  } else {
    console.log('‚úÖ SMTP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å–µ–º');
  }
});

app.post('/api/send', async (req, res) => {
  console.log('üìß –ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/send');
  console.log('üìß Headers:', req.headers);
  console.log('üìß Body:', req.body);
  console.log('üìß –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞:', { 
    name: req.body?.name, 
    phone: req.body?.phone, 
    service: req.body?.service,
    hasEmail: !!req.body?.email,
    hasComment: !!req.body?.comment
  });

  try {
    const { name, phone, email, service, comment } = req.body || {};
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!name || !phone || !service) {
      console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞:', { name: !!name, phone: !!phone, service: !!service });
      return res.status(400).json({ 
        ok: false, 
        error: 'required_fields_missing',
        message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'
      });
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
    const serviceLabels = {
      'production': '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
      'pcb-service': 'PCB –∏ —Å–µ—Ä–≤–∏—Å',
      'engineering': '–ò–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥',
      'consultation': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
      'other': '–î—Ä—É–≥–æ–µ'
    };

    const serviceName = serviceLabels[service] || service;

    // –°–æ–∑–¥–∞–Ω–∏–µ HTML –ø–∏—Å—å–º–∞
    const htmlContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #1565c0;">–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ –¢–ú–ü</h2>
        
        <div style="background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="color: #0e4a7b; margin-top: 0;">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h3>
          <p><strong>–ò–º—è:</strong> ${name}</p>
          <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${phone}</p>
          ${email ? `<p><strong>Email:</strong> ${email}</p>` : ''}
          <p><strong>–£—Å–ª—É–≥–∞:</strong> ${serviceName}</p>
        </div>
        
        ${comment ? `
        <div style="background: #eaf6ff; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="color: #0e4a7b; margin-top: 0;">–°–æ–æ–±—â–µ–Ω–∏–µ:</h3>
          <p style="white-space: pre-wrap;">${comment}</p>
        </div>
        ` : ''}
        
        <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #e1e8f0; color: #64748b; font-size: 14px;">
          <p>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å —Å–∞–π—Ç–∞ <a href="https://—Ç–µ—Ö–º–µ—Ç–ø—Ä–æ–º.—Ä—Ñ" style="color: #1565c0;">—Ç–µ—Ö–º–µ—Ç–ø—Ä–æ–º.—Ä—Ñ</a></p>
          <p>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}</p>
        </div>
      </div>
    `;

    // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const textContent = `
–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ –¢–ú–ü

–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
–ò–º—è: ${name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
${email ? `Email: ${email}` : ''}
–£—Å–ª—É–≥–∞: ${serviceName}

${comment ? `–°–æ–æ–±—â–µ–Ω–∏–µ:\n${comment}` : ''}

–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —Å–∞–π—Ç–∞ —Ç–µ—Ö–º–µ—Ç–ø—Ä–æ–º.—Ä—Ñ
–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}
    `;

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ...', {
      from: `${process.env.SMTP_USER || 'TMP@—Ç–µ—Ö–º–µ–ø—Ä–æ–º.—Ä—Ñ'}`,
      to: 'alexei.kravchenko.2016@gmail.com',
      subject: `–ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ –¢–ú–ü - ${serviceName}`,
      smtpHost: process.env.SMTP_HOST,
      smtpPort: process.env.SMTP_PORT
    });

    await transporter.sendMail({
      from: `–°–∞–π—Ç –¢–ú–ü <${process.env.SMTP_USER || 'TMP@—Ç–µ—Ö–º–µ–ø—Ä–æ–º.—Ä—Ñ'}>`,
      to: 'alexei.kravchenko.2016@gmail.com',
      replyTo: email ? email : undefined,
      subject: `–ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ –¢–ú–ü - ${serviceName}`,
      text: textContent,
      html: htmlContent,
    });

    console.log('‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    res.json({ ok: true, message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' });
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞:', e);
    res.status(500).json({ 
      ok: false, 
      error: 'send_failed',
      message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    });
  }
});

// Handle 404 for API routes
app.use('/api/*', (req, res) => {
  res.status(404).json({ 
    ok: false, 
    error: 'not_found',
    message: 'API endpoint not found'
  });
});

// Serve React app for all other routes
app.get('*', (req, res) => {
  res.sendFile(join(__dirname, 'index.html'));
});

const port = Number(process.env.PORT || 5174);
app.listen(port, () => console.log(`Server listening on http://localhost:${port}`)); 